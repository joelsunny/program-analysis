Assignment Statements:

WIDTH = 270
HEIGHT = 270
CELL = WIDTH//9
self.surface = pygame.display.set_mode((self.WIDTH, self.HEIGHT))
self.writer = pygame.freetype.SysFont("Arial", 24)
cols = (self.WIDTH)//(self.CELL)
rows = (self.HEIGHT)//(self.CELL)
x, y = (0, 0)
x += self.CELL
y += self.CELL
self.mat = mat
self.g = g
self.num_set = {1, 2, 3, 4, 5, 6, 7, 8, 9}
el_set = set()
el_set = set()
boxX, boxY = (i-(i%3), j-(j%3))
el_set = set()
row_set = self.find_all_row(i)
col_set = self.find_all_col(j)
box_set = self.find_all_box(i, j)
empty_indices = []
pos_stack = []
tstack_cache = {}
i, j = empty_indices.pop()
tstack = self.find_all_values(i, j)
tstack_cache[(i, j)] = tstack
self.mat[i][j] = 0
i, j = pos_stack.pop()
tstack = tstack_cache[(i, j)]
self.mat[i][j] = 0
val = tstack.pop()
self.mat[i][j] = val
puzzle = [[3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]
empty_puzzle = [ ([0])*9 for i in range(9) ]
s = Sudoku(empty_puzzle, None)
g = Grid()
done = False
clock = pygame.time.Clock()
s = Sudoku(puzzle, g)
done = True


Branch Conditions:

num == 0
(self.g) == None
(self.mat[i][j]) == 0
(len(tstack)) == 0
out
(len(tstack)) == 0
out
out
(event.type) == pygame.QUIT


Loop Conditions:

i in range(cols+1)
i in range(rows+1)
i in range(0, 9)
j in range(0, 9)
j in range(0, 9)
i in range(0, 9)
i in range(0, 3)
j in range(0, 3)
i in range(0, 9)
j in range(0, 9)
(len(empty_indices)) > 0
(len(tstack)) == 0
i in range(0, 9)
not done
event in pygame.event.get()


